@{
    ViewBag.Title = "User";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<script src="/Scripts/knockout-3.4.1.js" type="text/javascript"></script>
@*<script src="/Scripts/knockout.mapping.js"></script>*@

<h2>User page</h2>

<p>Cities:</p>
    <ul data-bind="foreach: Cities">
        <li>
            <span data-bind="text: Name"></span>
        </li>
    </ul>

<div id="dialog" data-bind="dialog: {autoOpen: false, title: 'Dialog test' }, dialogVisible: isOpen">foo dialog</div>
<div>
    <button data-bind="click: open">Edit</button>
</div>


<script type="text/javascript">
    //$( function() {
    //    $( "#dialog" ).dialog();
    //} );
    ko.bindingHandlers.dialog = {
        init: function (element, valueAccessor, allBindingsAccessor) {
            var options = ko.utils.unwrapObservable(valueAccessor()) || {};
            //do in a setTimeout, so the applyBindings doesn't bind twice from element being copied and moved to bottom
            setTimeout(function () {
                options.close = function () {
                    allBindingsAccessor().dialogVisible(false);
                };

                $(element).dialog(options);
            }, 0);

            //handle disposal (not strictly necessary in this scenario)
            ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                $(element).dialog("destroy");
            });
        },
        update: function (element, valueAccessor, allBindingsAccessor) {
            var shouldBeOpen = ko.utils.unwrapObservable(allBindingsAccessor().dialogVisible),
                $el = $(element),
                dialog = $el.data("uiDialog") || $el.data("dialog");

            //don't call open/close before initilization
            if (dialog) {
                $el.dialog(shouldBeOpen ? "open" : "close");
            }
        }
    };

        function City(data) {
            this.ID = ko.observable(data.ID);
            this.CountryID = ko.observable(data.CountryID);
            this.Name = ko.observable(data.Name);
        };

        function CityListModel() {
            var self = this;
            self.Cities = ko.observableArray([]);
            $.getJSON("/User/GetCities", function (data) {
                var mappedCities = $.map(data, function (item) { return new City(item) });
                self.Cities(mappedCities);
                //ko.mapping.fromJSON(data, {}, self.Cities);
            });
            self.isOpen = ko.observable(false);
            self.open = function () {
                self.isOpen(true);
            };
        }

        ko.applyBindings(new CityListModel());
</script>
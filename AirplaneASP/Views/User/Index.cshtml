@{
    ViewBag.Title = "User";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>User page</h2>
@*Cities section*@
<div>
    <p>Cities:</p>
    <ul data-bind="foreach: chosenCities()">
        @*<li data-bind="visible: isChecked">*@
        <li>
            <span data-bind="text: Name"></span>
        </li>
    </ul>
    <button data-bind="click: open">Edit</button>
@*Cities dialog*@
    <div id="dialog" data-bind="dialog: {autoOpen: false, title: 'Select cities' }, dialogVisible: isOpen">
        <ul data-bind="foreach: Cities">
            <li>
                <input type="checkbox" data-bind="checked: isChecked" />
                <span data-bind="text: Name"></span>
            </li>
        </ul>
        <button data-bind="click: save">OK</button>
    </div>
</div>
@*Filter date section*@
<div class="form-inline">
    <div class="form-group">
        <label class="control-label col-md-2" for="FromDate">From date</label>
        <div class="col-md-10">
            <input data-bind="value: startDate" class="form-control text-box single-line" data-val="true" data-val-date="The field From date must be a date." id="FromDate" name="FromDate" type="date" />
            <span class="field-validation-valid text-danger" data-valmsg-for="FromDate" data-valmsg-replace="true"></span>
        </div>
    </div>
    <div class="form-group">
        <label class="control-label col-md-2" for="ToDate">To date</label>
        <div class="col-md-10">
            <input data-bind="value: endDate" class="form-control text-box single-line" data-val="true" data-val-date="The field To date must be a date." id="ToDate" name="ToDate" type="date" />
            <span class="field-validation-valid text-danger" data-valmsg-for="ToDate" data-valmsg-replace="true"></span>
        </div>
    </div>
    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <button data-bind="click: save">OK</button>
        </div>
    </div>
</div>
@*Schedule section*@
<table class="table">
    <tr>
        <th>
            <span>From</span>
        </th>
        <th>
            <span>To</span>
        </th>
        <th>
            <span>Departure</span>
        </th>
        <th>
            <span>Arrival</span>
        </th>
        <th>
            <span>Company</span>
        </th>
        <th>
            <span>Comment</span>
        </th>
    </tr>
    <tbody data-bind="foreach: chosenSchedules()">
        <tr>
            <td>
                <span data-bind="text: From()"></span>
            </td>
            <td>
                <span data-bind="text: To()"></span>
            </td>
            <td>
                <span data-bind="text: moment(DepartureDT).format('L LTS')"></span>
            </td>
            <td>
                <span data-bind="text: moment(ArrivalDT).format('L LTS')"></span>
            </td>
            <td>
                <span data-bind="text: Company"></span>
            </td>
            <td>
                <span data-bind="text: Comment"></span>
            </td>
        </tr>
    </tbody>
</table>

<script type="text/javascript">
    //$( function() {
    //    $( "#dialog" ).dialog();
    //} );
    ko.bindingHandlers.dialog = {
        init: function (element, valueAccessor, allBindingsAccessor) {
            var options = ko.utils.unwrapObservable(valueAccessor()) || {};
            //do in a setTimeout, so the applyBindings doesn't bind twice from element being copied and moved to bottom
            setTimeout(function () {
                options.close = function () {
                    allBindingsAccessor().dialogVisible(false);
                };

                $(element).dialog(options);
            }, 0);

            //handle disposal (not strictly necessary in this scenario)
            ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
                $(element).dialog("destroy");
            });
        },
        update: function (element, valueAccessor, allBindingsAccessor) {
            var shouldBeOpen = ko.utils.unwrapObservable(allBindingsAccessor().dialogVisible),
                $el = $(element),
                dialog = $el.data("uiDialog") || $el.data("dialog");

            //don't call open/close before initilization
            if (dialog) {
                $el.dialog(shouldBeOpen ? "open" : "close");
            }
        }
    };

    var WebApiUrl = "http://localhost:4993/api";

    function City(data) {
        this.ID = data.ID;
        this.CountryID = data.CountryID;
        this.Name = data.Name;
        this.isChecked = ko.observable(false);
    };

    function Schedule(data) {
        self = this;
        self.ID = data.ID;
        self.FlightID = data.FlightID;
        self.FlightStateID = data.FlightStateID;
        self.DepartureDT = data.DepartureDT;
        self.ArrivalDT = data.ArrivalDT;
        self.Comment = data.Comment;
        self.CityDeparture = data.CityDeparture;
        self.CountryDeparture = data.CountryDeparture;
        self.CityArrival = data.CityArrival;
        self.CountryArrival = data.CountryArrival;
        self.Company = data.Company;
        self.From = function () {
            return self.CityDeparture + " (" + self.CountryDeparture + ")";
        };
        self.To = function () {
            return self.CityArrival + " (" + self.CountryArrival + ")";
        };
    };

    function CityListModel() {
        var self = this;
        self.startDate = ko.observable(moment(Date.now()).format("MM/DD/YYYY"));
        self.endDate = ko.observable(moment(Date.now()).format("MM/DD/YYYY"));
        self.Cities = ko.observableArray([]);
        self.chosenCities = function () {
            return ko.utils.arrayFilter(self.Cities(), function (city) {
                return city.isChecked();
            })
        };
        self.Schedules = ko.observableArray([]);
        self.chosenSchedules = function () {
            return ko.utils.arrayFilter(self.Schedules(), function (schedule) {
                return ko.utils.arrayFirst(self.chosenCities(), function (chosenCity) {
                    return (chosenCity.Name == schedule.CityArrival) || (chosenCity.Name == schedule.CityDeparture);
                });
            });
        };
        self.loadCities = function () {
            $.getJSON(WebApiUrl + "/City/CityDTOs", function (data) {
                var mappedCities = $.map(data, function (item) {
                    var city = new City(item);
                    if (self.chosenCities().length > 0) {
                        var match = ko.utils.arrayFirst(self.chosenCities(), function (oldItem) {
                            return oldItem.ID == item.ID;
                        });
                        if(match) {
                            city.isChecked = ko.observable(true);
                        }
                    }
                    return city;
                });
                self.Cities(mappedCities);
            });
        };
        self.loadSchedules = function () {
            var startDateString = moment(self.startDate()).toJSON();
            var endDateString = moment(self.endDate()).toJSON();
            var selectedCityIDsString = self.chosenCities().map(function (city) { return city.ID; });
            $.getJSON(WebApiUrl +
                        "/Schedule/schedules", {
                              startdate: startDateString,
                              enddate: endDateString,
                              guid: selectedCityIDsString
                          },
                        function (data) {
                var mappedCities = $.map(data, function (item) {
                    return new Schedule(item);
                });
                self.Schedules(mappedCities);
            });
        };
        self.isOpen = ko.observable(false);
        self.open = function () {
            self.loadCities();
            self.isOpen(true);
        };
        self.save = function () {
            self.loadSchedules();
            self.isOpen(false);
        };
    }

    ko.applyBindings(new CityListModel());
</script>
